@article{PLACES2020, title={{Generating Interactive WebSocket Applications in TypeScript}}, volume={314}, ISSN={2075-2180}, DOI={10.4204/EPTCS.314.2}, abstractNote={Advancements in mobile device computing power have made interactive web applications possible, allowing the web browser to render contents dynamically and support low-latency communication with the server. This comes at a cost to the developer, who now needs to reason more about correctness of communication patterns in their application as web applications support more complex communication patterns. Multiparty session types (MPST) provide a framework for verifying conformance of implementations to their prescribed communication protocol. Existing proposals for applying the MPST framework in application developments either neglect the event-driven nature of web applications, or lack compatibility with industry tools and practices, which discourages mainstream adoption by web developers. In this paper, we present an implementation of the MPST framework for developing interactive web applications using familiar industry tools using TypeScript and the React.js framework. The developer can use the Scribble protocol language to specify the protocol and use the Scribble toolchain to validate and obtain the local protocol for each role. The local protocol describes the interactions of the global communication protocol observed by the role. We encode the local protocol into TypeScript types, catering for server-side and client-side targets separately. We show that our encoding guarantees that only implementations which conform to the protocol can type-check. We demonstrate the effectiveness of our approach through a web-based implementation of the classic Noughts and Crosses game from an MPST formalism of the game logic.}, note={arXiv: 2004.01321}, journal={Electronic Proceedings in Theoretical Computer Science}, author={Miu, Anson and Ferreira, Francisco and Yoshida, Nobuko and Zhou, Fangyi}, year={2020}, month={Apr}, pages={12–22} }

@article{MVU2020, title={{Model-View-Update-Communicate: Session Types meet the Elm Architecture}}, url={http://arxiv.org/abs/1910.11108}, abstractNote={Session types are a type discipline for communication channel endpoints which allow conformance to protocols to be checked statically. Safely implementing session types requires linearity, usually in the form of a linear type system. Unfortunately, linear typing is difficult to integrate with graphical user interfaces (GUIs), and to date most programs using session types are command line applications. In this paper, we propose the first principled integration of session typing and GUI development by building upon the Model-View-Update (MVU) architecture, pioneered by the Elm programming language. We introduce $lambda_{textsf{MVU}}$, the first formal model of the MVU architecture, and prove it sound. By extending $lambda_{textsf{MVU}}$ with emph{commands} as found in Elm, along with emph{linearity} and emph{model transitions}, we show the first formal integration of session typing and GUI programming. We implement our approach in the Links web programming language, and show examples including a two-factor authentication workflow and multi-room chat server.}, note={arXiv: 1910.11108}, journal={arXiv:1910.11108 [cs]}, author={Fowler, Simon}, year={2020}, month={Jan} }

@inbook{LINKS, place={Berlin, Heidelberg}, title={{Links: Web Programming Without Tiers}}, volume={4709}, ISBN={978-3-540-74791-8}, url={http://link.springer.com/10.1007/978-3-540-74792-5_12}, DOI={10.1007/978-3-540-74792-5_12}, abstractNote={Links is a programming language for web applications that generates code for all three tiers of a web application from a single source, compiling into JavaScript to run on the client and into SQL to run on the database. Links supports rich clients running in what has been dubbed ‘Ajax’ style, and supports concurrent processes with statically-typed message passing. Links is scalable in the sense that session state is preserved in the client rather than the server, in contrast to other approaches such as Java Servlets or PLT Scheme. Client-side concurrency in JavaScript and transfer of computation between client and server are both supported by translation into continuation-passing style.}, booktitle={Formal Methods for Components and Objects}, publisher={Springer Berlin Heidelberg}, author={Cooper, Ezra and Lindley, Sam and Wadler, Philip and Yallop, Jeremy}, editor={de Boer, Frank S. and Bonsangue, Marcello M. and Graf, Susanne and de Roever, Willem-Paul}, year={2007}, pages={266–296} }

@article{Tiers, title={{Exceptional Asynchronous Session Types: Session Types without Tiers}}, volume={3}, ISSN={24751421}, DOI={10.1145/3290341}, number={POPL}, journal={Proceedings of the ACM on Programming Languages}, author={Fowler, Simon and Lindley, Sam and Morris, J. Garrett and Decova, Sára}, year={2019}, month={Jan}, pages={1–29} }

@article{PureScript2019, title={{Multiparty Session Type-safe Web Development with Static Linearity}}, volume={291}, ISSN={2075-2180}, DOI={10.4204/EPTCS.291.4}, journal={Electronic Proceedings in Theoretical Computer Science}, author={King, Jonathan and Ng, Nicholas and Yoshida, Nobuko}, year={2019}, month={Apr}, pages={35–46} }

@article{TSOP, title={{Concurrent Typestate-Oriented Programming in Java}}, volume={291}, ISSN={2075-2180}, DOI={10.4204/EPTCS.291.3}, abstractNote={We describe a generative approach that enables concurrent typestate-oriented programming in Java and other mainstream languages. The approach allows programmers to implement objects exposing a state-sensitive interface using a high-level synchronization abstraction that synchronizes methods with the states of the receiver object in which those methods have an effect. An external tool takes care of generating all the boilerplate code that implements the synchronization logic. Behavioral types are used to specify object protocols. The tool integrates protocol conformance verification with the synchronization logic so that protocol violations are promptly detected at runtime.}, note={arXiv: 1904.01286}, journal={Electronic Proceedings in Theoretical Computer Science}, author={Gerbo, Rosita and Padovani, Luca}, year={2019}, month={Apr}, pages={24–34} }

@inproceedings{Hybrid2016,
  author = {Raymond Hu and Nobuko Yoshida},
  title = {{Hybrid Session Verification through Endpoint API Generation}},
  booktitle = {19th International Conference on Fundamental Approaches to Software Engineering},
  series = {LNCS},
  volume = {9633},
  pages = {401--418},
  publisher = {Springer},
  doi = "10.1007/978-3-662-49665-7_24",
  year = 2016
}

@article{Python2017, title={{Session Types Go Dynamic or How to Verify Your Python Conversations}}, volume={137}, ISSN={2075-2180}, DOI={10.4204/EPTCS.137.8}, abstractNote={This paper presents the first implementation of session types in a dynamically-typed language - Python. Communication safety of the whole system is guaranteed at runtime by monitors that check the execution traces comply with an associated protocol. Protocols are written in Scribble, a choreography description language based on multiparty session types, with addition of logic formulas for more precise behaviour properties. The presented framework overcomes the limitations of previous works on the session types where all endpoints should be statically typed so that they do not permit interoperability with untyped participants. The advantages, expressiveness and performance of dynamic protocol checking are demonstrated through use case and benchmarks.}, note={arXiv: 1312.2704}, journal={Electronic Proceedings in Theoretical Computer Science}, author={Neykova, Rumyana}, year={2013}, month={Dec}, pages={95–102} }

@article{HuJava, title={{Distributed Programming Using Java APIs Generated from Session Types}}, abstractNote={This is a tutorial on using Scribble [9], a toolchain based on multiparty session types [1, 4], for distributed programming in Java. The methodology is based on the generation of protocol-speciﬁc Endpoint APIs from Scribble speciﬁcations [6]. We start with a brief recap of TCP network programming using standard Java APIs, and their limitations with regards to safety assurances. The main tutorial content is an overview of the key stages of the Scribble toolchain, from global protocol speciﬁcation, through Endpoint API generation, to Java endpoint implementation, with examples. We discuss the hybrid form of session safety promoted by the Endpoint API generation approach. We then consider Scribble speciﬁcations and implementations of HTTP as a real-world use case. Finally, we demonstrate some further Scribble features that leverage Endpoint API generation to safely support more advanced communication patterns.}, author={Hu, Raymond}, pages={22} }

@InProceedings{LinearDecomp,
  author =	{Alceste Scalas and Ornela Dardha and Raymond Hu and Nobuko Yoshida},
  title =	{{A Linear Decomposition of Multiparty Sessions for Safe Distributed Programming}},
  booktitle =	{31st European Conference on Object-Oriented Programming (ECOOP 2017)},
  pages =	{24:1--24:31},
  series =	{Leibniz International Proceedings in Informatics (LIPIcs)},
  ISBN =	{978-3-95977-035-4},
  ISSN =	{1868-8969},
  year =	{2017},
  volume =	{74},
  editor =	{Peter M{\"u}ller},
  publisher =	{Schloss Dagstuhl--Leibniz-Zentrum fuer Informatik},
  address =	{Dagstuhl, Germany},
  URL =		{http://drops.dagstuhl.de/opus/volltexte/2017/7263},
  URN =		{urn:nbn:de:0030-drops-72637},
  doi =		{10.4230/LIPIcs.ECOOP.2017.24},
  annote =	{Keywords: process calculi, session types, concurrent programming, Scala}
}

 @inproceedings{BinaryDecomp, place={Cham}, series={Lecture Notes in Computer Science}, title={{Multiparty Session Types Within a Canonical Binary Theory, and Beyond}}, ISBN={978-3-319-39570-8}, DOI={10.1007/978-3-319-39570-8_6}, abstractNote={A widespread approach to software service analysis uses session types. Very different type theories for binary and multiparty protocols have been developed; establishing precise connections between them remains an open problem. We present the first formal relation between two existing theories of binary and multiparty session types: a binary system rooted in linear logic, and a multiparty system based on automata theory. Our results enable the analysis of multiparty protocols using a (much simpler) type theory for binary protocols, ensuring protocol fidelity and deadlock-freedom. As an application, we offer the first theory of multiparty session types with behavioral genericity. This theory is natural and powerful; its analysis techniques reuse results for binary session types.}, booktitle={Formal Techniques for Distributed Objects, Components, and Systems}, publisher={Springer International Publishing}, author={Caires, Luís and Pérez, Jorge A.}, editor={Albert, Elvira and Lanese, Ivan}, year={2016}, pages={74–95}, collection={Lecture Notes in Computer Science} }

 @inproceedings{BinaryDuality, place={Dagstuhl, Germany}, series={Leibniz International Proceedings in Informatics (LIPIcs)}, title={{Coherence Generalises Duality: A Logical Explanation of Multiparty Session Types}}, volume={59}, ISBN={978-3-95977-017-0}, ISSN={1868-8969}, url={http://drops.dagstuhl.de/opus/volltexte/2016/6181}, DOI={10.4230/LIPIcs.CONCUR.2016.33}, booktitle={27th International Conference on Concurrency Theory (CONCUR 2016)}, publisher={Schloss Dagstuhl–Leibniz-Zentrum fuer Informatik}, author={Carbone, Marco and Lindley, Sam and Montesi, Fabrizio and Schürmann, Carsten and Wadler, Philip}, editor={Desharnais, Josée and Jagadeesan, Radha}, year={2016}, pages={33:1–33:15}, collection={Leibniz International Proceedings in Informatics (LIPIcs)} }

@inproceedings{JSON,
  title={{Foundations of JSON schema}},
  author={Pezoa, Felipe and Reutter, Juan L and Suarez, Fernando and Ugarte, Mart{\'\i}n and Vrgo{\v{c}}, Domagoj},
  booktitle={Proceedings of the 25th International Conference on World Wide Web},
  pages={263--273},
  year={2016},
  organization={International World Wide Web Conferences Steering Committee}
}

@article{ATS2016, title={Applied Type System: An Approach to Practical Programming with Theorem-Proving}, abstractNote={The framework Pure Type System (PTS) offers a simple and general approach to designing and formalizing type systems. However, in the presence of dependent types, there often exist certain acute problems that make it difﬁcult for PTS to directly accommodate many common realistic programming features such as general recursion, recursive types, effects (e.g., exceptions, references, input/output), etc. In this paper, Applied Type System (ATS) is presented as a framework for designing and formalizing type systems in support of practical programming with advanced types (including dependent types). In particular, it is demonstrated that ATS can readily accommodate a paradigm referred to as programming with theorem-proving (PwTP) in which programs and proofs are constructed in a syntactically intertwined manner, yielding a practical approach to internalizing constraint-solving needed during type-checking. The key salient feature of ATS lies in a complete separation between statics, where types are formed and reasoned about, and dynamics, where programs are constructed and evaluated. With this separation, it is no longer possible for a program to occur in a type as is otherwise allowed in PTS. The paper contains not only a formal development of ATS but also some examples taken from ATS, a programming language with a type system rooted in ATS, in support of using ATS as a framework to form type systems for practical programming.}, journal={Journal of Functional Programming}, author={Xi, Hongwei}, year={2016}, pages={30} }

 @inproceedings{AsyncHonda, place={Berlin, Heidelberg}, title={An object calculus for asynchronous communication}, ISBN={978-3-540-47537-8}, abstractNote={This paper presents a formal system based on the notion of objects and asynchronous communication. Built on Milner’s work on π-calculus, the communication primitive of the formal system is purely based on asynchronous communication, which makes it unique among various concurrency formalisms. Computationally this results in a consistent reduction of Milner’s calculus, while retaining the same expressive power. Seen semantically asynchronous communication induces a surprisingly different framework where bisimulation is strictly more general than its synchronous counterpart. This paper shows basic construction of the formal system along with several illustrative examples.}, booktitle={ECOOP’91 European Conference on Object-Oriented Programming}, publisher={Springer Berlin Heidelberg}, author={Honda, Kohei and Tokoro, Mario}, editor={America, PierreEditor}, year={1991}, pages={133–147} }

@misc{C406Lecture,
  author        = {Nobuko Yoshida},
  title         = {{Lecture Notes in CO406 Concurrent Processes}},
  month         = {October},
  year          = {2019}
}


@book{Milner1999,
 author = {Milner, R.},
 title = {Communicating and Mobile Systems: The $\pi$-calculus},
 year = {1999},
 isbn = {0-521-65869-1},
 publisher = {Cambridge University Press},
 address = {New York, NY, USA}
} 


 @techreport{WebSocketRFC,
   AUTHOR = {I. Fette and A. Melnikov},
   TITLE = "{The WebSocket Protocol}",
   HOWPUBLISHED = {Internet Requests for Comments},
   TYPE="{RFC}",
   NUMBER=6455,
   PAGES = {1-71},
   YEAR = {2011},
   MONTH = {December},
   ISSN = {2070-1721},
   PUBLISHER = "{RFC Editor}",
   INSTITUTION = "{RFC Editor}",
   URL={https://www.rfc-editor.org/rfc/rfc1654.txt}
   }




@article{MPST, title={{A Very Gentle Introduction to Multiparty Session Types}}, abstractNote={Multiparty session types (MPST) are a formal specification and verification framework for message-passing protocols without cen- tral control: the desired interactions at the scale of the network itself are specified into a session (called global type). Global types are then projected onto local types (one for each participant), which describe the protocol from a local point of view. These local types are used to validate an application through type-checking, monitoring, and code generation. Theory of session types guarantees that local conformance of all partic- ipants induces global conformance of the network to the initial global type. This paper provides a very gentle introduction of the simplest ver- sion of multiparty session types for readers who are not familiar with session types nor process calculi.}, author={Yoshida, Nobuko and Lorenzo, Gheri} }

@inproceedings{MPAST,
  author = {Kohei Honda and Nobuko Yoshida and Marco Carbone},
  title = {{Multiparty Asynchronous Session Types}},
  booktitle = {35th annual ACM SIGPLAN-SIGACT symposium on Principles of programming languages},
  pages = {273--284},
  publisher = {ACM},
  doi = "10.1145/1328897.1328472",
  year = 2008
}


@inproceedings{Scribble,
  author = {Nobuko Yoshida and Raymond Hu and Rumyana Neykova and Nicholas Ng},
  title = {{The Scribble Protocol Language}},
  booktitle = {8th International Symposium on Trustworthy Global Computing},
  series = {LNCS},
  volume = {8358},
  pages = {22--41},
  publisher = {Springer},
  doi = "10.1007/978-3-319-05119-2_3",
  year = 2013
}

@inproceedings{GentleMPST,
  author = {Mario Coppo and Mariangiola Dezani-Ciancaglini and Luca Padovani and Nobuko Yoshida},
  title = {{A Gentle Introduction to Multiparty Asynchronous Session Types}},
  booktitle = {15th International School on Formal Methods for the Design of Computer, Communication and Software Systems: Multicore Programming},
  series = {LNCS},
  volume = {9104},
  pages = {146--178},
  publisher = {Springer},
  doi = "10.1007/978-3-319-18941-3_4",
  year = 2015
}



 @inbook{FASE2017, place={Berlin, Heidelberg}, title={Explicit Connection Actions in Multiparty Session Types}, volume={10202}, ISBN={978-3-662-54493-8}, url={http://link.springer.com/10.1007/978-3-662-54494-5_7}, DOI={10.1007/978-3-662-54494-5_7}, abstractNote={This work extends asynchronous multiparty session types (MPST) with explicit connection actions to support protocols with optional and dynamic participants. The actions by which endpoints are connected and disconnected are a key element of real-world protocols that is not treated in existing MPST works. In addition, the use cases motivating explicit connections often require a more relaxed form of multiparty choice: these extensions do not satisfy the conservative restrictions used to ensure safety in standard syntactic MPST. Instead, we develop a modelling-based approach to validate MPST safety and progress for these enriched protocols. We present a toolchain implementation, for distributed programming based on our extended MPST in Java, and a core formalism, demonstrating the soundness of our approach. We discuss key implementation issues related to the proposed extensions: a practical treatment of choice subtyping for MPST progress, and multiparty correlation of dynamic binary connections.}, booktitle={Fundamental Approaches to Software Engineering}, publisher={Springer Berlin Heidelberg}, author={Hu, Raymond and Yoshida, Nobuko}, editor={Huisman, Marieke and Rubin, JuliaEditors}, year={2017}, pages={116–133} }

 @inproceedings{UnderstandingTypeScript, place={Berlin, Heidelberg}, series={Lecture Notes in Computer Science}, title={{Understanding TypeScript}}, ISBN={978-3-662-44202-9}, DOI={10.1007/978-3-662-44202-9_11}, abstractNote={TypeScript is an extension of JavaScript intended to enable easier development of large-scale JavaScript applications. While every JavaScript program is a TypeScript program, TypeScript offers a module system, classes, interfaces, and a rich gradual type system. The intention is that TypeScript provides a smooth transition for JavaScript programmers—well-established JavaScript programming idioms are supported without any major rewriting or annotations. One interesting consequence is that the TypeScript type system is not statically sound by design. The goal of this paper is to capture the essence of TypeScript by giving a precise definition of this type system on a core set of constructs of the language. Our main contribution, beyond the familiar advantages of a robust, mathematical formalization, is a refactoring into a safe inner fragment and an additional layer of unsafe rules.}, booktitle={ECOOP 2014 – Object-Oriented Programming}, publisher={Springer}, author={Bierman, Gavin and Abadi, Martín and Torgersen, Mads}, editor={Jones, RichardEditor}, year={2014}, pages={257–281}, collection={Lecture Notes in Computer Science} }



 @misc{React,
  title={{React – A JavaScript library for building user interfaces}}, url={https://reactjs.org/}, abstractNote={A JavaScript library for building user interfaces}, author={{Facebook Open Source}} }
