 @article{ATS2016, title={Applied Type System: An Approach to Practical Programming with Theorem-Proving}, abstractNote={The framework Pure Type System (PTS) offers a simple and general approach to designing and formalizing type systems. However, in the presence of dependent types, there often exist certain acute problems that make it difﬁcult for PTS to directly accommodate many common realistic programming features such as general recursion, recursive types, effects (e.g., exceptions, references, input/output), etc. In this paper, Applied Type System (ATS) is presented as a framework for designing and formalizing type systems in support of practical programming with advanced types (including dependent types). In particular, it is demonstrated that ATS can readily accommodate a paradigm referred to as programming with theorem-proving (PwTP) in which programs and proofs are constructed in a syntactically intertwined manner, yielding a practical approach to internalizing constraint-solving needed during type-checking. The key salient feature of ATS lies in a complete separation between statics, where types are formed and reasoned about, and dynamics, where programs are constructed and evaluated. With this separation, it is no longer possible for a program to occur in a type as is otherwise allowed in PTS. The paper contains not only a formal development of ATS but also some examples taken from ATS, a programming language with a type system rooted in ATS, in support of using ATS as a framework to form type systems for practical programming.}, journal={Journal of Functional Programming}, author={Xi, Hongwei}, year={2016}, pages={30} }

 @inproceedings{AsyncHonda, place={Berlin, Heidelberg}, title={An object calculus for asynchronous communication}, ISBN={978-3-540-47537-8}, abstractNote={This paper presents a formal system based on the notion of objects and asynchronous communication. Built on Milner’s work on π-calculus, the communication primitive of the formal system is purely based on asynchronous communication, which makes it unique among various concurrency formalisms. Computationally this results in a consistent reduction of Milner’s calculus, while retaining the same expressive power. Seen semantically asynchronous communication induces a surprisingly different framework where bisimulation is strictly more general than its synchronous counterpart. This paper shows basic construction of the formal system along with several illustrative examples.}, booktitle={ECOOP’91 European Conference on Object-Oriented Programming}, publisher={Springer Berlin Heidelberg}, author={Honda, Kohei and Tokoro, Mario}, editor={America, PierreEditor}, year={1991}, pages={133–147} }

@misc{C406Lecture,
  author        = {Nobuko Yoshida},
  title         = {{Lecture Notes in CO406 Concurrent Processes}},
  month         = {October},
  year          = {2019}
}


@book{Milner1999,
 author = {Milner, R.},
 title = {Communicating and Mobile Systems: The $\pi$-calculus},
 year = {1999},
 isbn = {0-521-65869-1},
 publisher = {Cambridge University Press},
 address = {New York, NY, USA}
} 


 @techreport{WebSocketRFC,
   AUTHOR = {I. Fette and A. Melnikov},
   TITLE = "{The WebSocket Protocol}",
   HOWPUBLISHED = {Internet Requests for Comments},
   TYPE="{RFC}",
   NUMBER=6455,
   PAGES = {1-71},
   YEAR = {2011},
   MONTH = {December},
   ISSN = {2070-1721},
   PUBLISHER = "{RFC Editor}",
   INSTITUTION = "{RFC Editor}",
   URL={https://www.rfc-editor.org/rfc/rfc1654.txt}
   }

@inproceedings{Hybrid2016,
  author = {Raymond Hu and Nobuko Yoshida},
  title = {{Hybrid Session Verification through Endpoint API Generation}},
  booktitle = {19th International Conference on Fundamental Approaches to Software Engineering},
  series = {LNCS},
  volume = {9633},
  pages = {401--418},
  publisher = {Springer},
  doi = "10.1007/978-3-662-49665-7_24",
  year = 2016
}

@article{PureScript2019, title={Multiparty Session Type-safe Web Development with Static Linearity}, volume={291}, ISSN={2075-2180}, DOI={10.4204/EPTCS.291.4}, journal={Electronic Proceedings in Theoretical Computer Science}, author={King, Jonathan and Ng, Nicholas and Yoshida, Nobuko}, year={2019}, month={Apr}, pages={35–46} }

@article{Python2017,
  author = {Rumyana Neykova and Nobuko Yoshida},
  title = {{How to Verify Your Python Conversations}},
  journal = {Behavioural Types: from Theory to Tools},
  pages = {77--98},
  publisher = {River Publishers},
  doi = "10.13052/rp-9788793519817",
  year = 2017
}

@article{MPST, title={{A Very Gentle Introduction to Multiparty Session Types}}, abstractNote={Multiparty session types (MPST) are a formal specification and verification framework for message-passing protocols without cen- tral control: the desired interactions at the scale of the network itself are specified into a session (called global type). Global types are then projected onto local types (one for each participant), which describe the protocol from a local point of view. These local types are used to validate an application through type-checking, monitoring, and code generation. Theory of session types guarantees that local conformance of all partic- ipants induces global conformance of the network to the initial global type. This paper provides a very gentle introduction of the simplest ver- sion of multiparty session types for readers who are not familiar with session types nor process calculi.}, author={Yoshida, Nobuko and Lorenzo, Gheri} }

@inproceedings{MPAST,
  author = {Kohei Honda and Nobuko Yoshida and Marco Carbone},
  title = {{Multiparty Asynchronous Session Types}},
  booktitle = {35th annual ACM SIGPLAN-SIGACT symposium on Principles of programming languages},
  pages = {273--284},
  publisher = {ACM},
  doi = "10.1145/1328897.1328472",
  year = 2008
}


@inproceedings{Scribble,
  author = {Nobuko Yoshida and Raymond Hu and Rumyana Neykova and Nicholas Ng},
  title = {{The Scribble Protocol Language}},
  booktitle = {8th International Symposium on Trustworthy Global Computing},
  series = {LNCS},
  volume = {8358},
  pages = {22--41},
  publisher = {Springer},
  doi = "10.1007/978-3-319-05119-2_3",
  year = 2013
}

@inproceedings{GentleMPST,
  author = {Mario Coppo and Mariangiola Dezani-Ciancaglini and Luca Padovani and Nobuko Yoshida},
  title = {{A Gentle Introduction to Multiparty Asynchronous Session Types}},
  booktitle = {15th International School on Formal Methods for the Design of Computer, Communication and Software Systems: Multicore Programming},
  series = {LNCS},
  volume = {9104},
  pages = {146--178},
  publisher = {Springer},
  doi = "10.1007/978-3-319-18941-3_4",
  year = 2015
}

@article{MVU2019, title={Model-View-Update-Communicate: Session Types meet the Elm Architecture}, url={http://arxiv.org/abs/1910.11108}, abstractNote={The Elm programming language pioneers the Model-View-Update (MVU) architecture for writing web applications in a functional style. Although popular amongst developers, MVU has not been studied formally; it is therefore difficult to reason about any extensions, and each implementer must re-discover the essence of the architecture. In this paper we introduce $lambda_{textsf{MVU}}$, a formal model of the MVU architecture as a concurrent $lambda$-calculus, and prove its correctness. We extend $lambda_{textsf{MVU}}$ with subscriptions and commands as found in Elm. By further extending the calculus with linearity and model transitions, we provide the first formal integration of session-typed communication with a GUI framework. We implement our approach in the Links web programming language, and show examples including a two-factor authentication workflow and multi-room chat server.}, note={arXiv: 1910.11108}, journal={arXiv:1910.11108 [cs]}, author={Fowler, Simon}, year={2019}, month={Oct} }


 @inbook{FASE2017, place={Berlin, Heidelberg}, title={Explicit Connection Actions in Multiparty Session Types}, volume={10202}, ISBN={978-3-662-54493-8}, url={http://link.springer.com/10.1007/978-3-662-54494-5_7}, DOI={10.1007/978-3-662-54494-5_7}, abstractNote={This work extends asynchronous multiparty session types (MPST) with explicit connection actions to support protocols with optional and dynamic participants. The actions by which endpoints are connected and disconnected are a key element of real-world protocols that is not treated in existing MPST works. In addition, the use cases motivating explicit connections often require a more relaxed form of multiparty choice: these extensions do not satisfy the conservative restrictions used to ensure safety in standard syntactic MPST. Instead, we develop a modelling-based approach to validate MPST safety and progress for these enriched protocols. We present a toolchain implementation, for distributed programming based on our extended MPST in Java, and a core formalism, demonstrating the soundness of our approach. We discuss key implementation issues related to the proposed extensions: a practical treatment of choice subtyping for MPST progress, and multiparty correlation of dynamic binary connections.}, booktitle={Fundamental Approaches to Software Engineering}, publisher={Springer Berlin Heidelberg}, author={Hu, Raymond and Yoshida, Nobuko}, editor={Huisman, Marieke and Rubin, JuliaEditors}, year={2017}, pages={116–133} }

 @inproceedings{UnderstandingTypeScript, place={Berlin, Heidelberg}, series={Lecture Notes in Computer Science}, title={{Understanding TypeScript}}, ISBN={978-3-662-44202-9}, DOI={10.1007/978-3-662-44202-9_11}, abstractNote={TypeScript is an extension of JavaScript intended to enable easier development of large-scale JavaScript applications. While every JavaScript program is a TypeScript program, TypeScript offers a module system, classes, interfaces, and a rich gradual type system. The intention is that TypeScript provides a smooth transition for JavaScript programmers—well-established JavaScript programming idioms are supported without any major rewriting or annotations. One interesting consequence is that the TypeScript type system is not statically sound by design. The goal of this paper is to capture the essence of TypeScript by giving a precise definition of this type system on a core set of constructs of the language. Our main contribution, beyond the familiar advantages of a robust, mathematical formalization, is a refactoring into a safe inner fragment and an additional layer of unsafe rules.}, booktitle={ECOOP 2014 – Object-Oriented Programming}, publisher={Springer}, author={Bierman, Gavin and Abadi, Martín and Torgersen, Mads}, editor={Jones, RichardEditor}, year={2014}, pages={257–281}, collection={Lecture Notes in Computer Science} }



 @misc{React,
  title={{React – A JavaScript library for building user interfaces}}, url={https://reactjs.org/}, abstractNote={A JavaScript library for building user interfaces}, author={{Facebook Open Source}} }
