 @techreport{WebSocketRFC,
   AUTHOR = {I. Fette and A. Melnikov},
   TITLE = "{The WebSocket Protocol}",
   HOWPUBLISHED = {Internet Requests for Comments},
   TYPE="{RFC}",
   NUMBER=6455,
   PAGES = {1-71},
   YEAR = {2011},
   MONTH = {December},
   ISSN = {2070-1721},
   PUBLISHER = "{RFC Editor}",
   INSTITUTION = "{RFC Editor}",
   URL={https://www.rfc-editor.org/rfc/rfc1654.txt}
   }

@inproceedings{Scribble,
  author = {Nobuko Yoshida and Raymond Hu and Rumyana Neykova and Nicholas Ng},
  title = {{The Scribble Protocol Language}},
  booktitle = {8th International Symposium on Trustworthy Global Computing},
  series = {LNCS},
  volume = {8358},
  pages = {22--41},
  publisher = {Springer},
  doi = "10.1007/978-3-319-05119-2_3",
  year = 2013
}

@inproceedings{Hybrid2016,
  author = {Raymond Hu and Nobuko Yoshida},
  title = {{Hybrid Session Verification through Endpoint API Generation}},
  booktitle = {19th International Conference on Fundamental Approaches to Software Engineering},
  series = {LNCS},
  volume = {9633},
  pages = {401--418},
  publisher = {Springer},
  doi = "10.1007/978-3-662-49665-7_24",
  year = 2016
}

@article{PureScript2019, title={Multiparty Session Type-safe Web Development
  with Static Linearity}, volume={291}, ISSN={2075-2180},
DOI={10.4204/EPTCS.291.4}, journal={Electronic Proceedings in Theoretical
  Computer Science}, author={King, Jonathan and Ng, Nicholas and Yoshida,
    Nobuko}, year={2019}, month={Apr}, pages={35--46} }

@article{Python2017,
  author = {Rumyana Neykova and Nobuko Yoshida},
  title = {{How to Verify Your Python Conversations}},
  journal = {Behavioural Types: from Theory to Tools},
  pages = {77--98},
  publisher = {River Publishers},
  doi = "10.13052/rp-9788793519817",
  year = 2017
}

@inproceedings{MPST,
  author = {Mario Coppo and Mariangiola Dezani-Ciancaglini and Luca Padovani and Nobuko Yoshida},
  title = {{A Gentle Introduction to Multiparty Asynchronous Session Types}},
  booktitle = {15th International School on Formal Methods for the Design of Computer, Communication and Software Systems: Multicore Programming},
  series = {LNCS},
  volume = {9104},
  pages = {146--178},
  publisher = {Springer},
  doi = "10.1007/978-3-319-18941-3_4",
  year = 2015
}

@inproceedings{TypeScript, place={Berlin, Heidelberg}, series={Lecture Notes
   in Computer Science}, title={Understanding TypeScript},
 ISBN={978-3-662-44202-9}, DOI={10.1007/978-3-662-44202-9_11},
 abstractNote={TypeScript is an extension of JavaScript intended to enable
   easier development of large-scale JavaScript applications. While every
     JavaScript program is a TypeScript program, TypeScript offers a module
     system, classes, interfaces, and a rich gradual type system. The intention
     is that TypeScript provides a smooth transition for JavaScript
     programmers—well-established JavaScript programming idioms are supported
     without any major rewriting or annotations. One interesting consequence is
     that the TypeScript type system is not statically sound by design. The
     goal of this paper is to capture the essence of TypeScript by giving a
     precise definition of this type system on a core set of constructs of the
     language. Our main contribution, beyond the familiar advantages of a
     robust, mathematical formalization, is a refactoring into a safe inner
     fragment and an additional layer of unsafe rules.}, booktitle={ECOOP 2014
       – Object-Oriented Programming}, publisher={Springer}, author={Bierman,
         Gavin and Abadi, Martín and Torgersen, Mads}, editor={Jones,
           RichardEditor}, year={2014}, pages={257--281}, collection={Lecture Notes in Computer Science} }

@article{MVU2019, title={Model-View-Update-Communicate: Session Types meet the Elm Architecture}, url={http://arxiv.org/abs/1910.11108}, abstractNote={The Elm programming language pioneers the Model-View-Update (MVU) architecture for writing web applications in a functional style. Although popular amongst developers, MVU has not been studied formally; it is therefore difficult to reason about any extensions, and each implementer must re-discover the essence of the architecture. In this paper we introduce $lambda_{textsf{MVU}}$, a formal model of the MVU architecture as a concurrent $lambda$-calculus, and prove its correctness. We extend $lambda_{textsf{MVU}}$ with subscriptions and commands as found in Elm. By further extending the calculus with linearity and model transitions, we provide the first formal integration of session-typed communication with a GUI framework. We implement our approach in the Links web programming language, and show examples including a two-factor authentication workflow and multi-room chat server.}, note={arXiv: 1910.11108}, journal={arXiv:1910.11108 [cs]}, author={Fowler, Simon}, year={2019}, month={Oct} }


 @inbook{LINKS, place={Berlin, Heidelberg}, title={Links: Web Programming
   Without Tiers}, volume={4709}, ISBN={978-3-540-74791-8},
   url={http://link.springer.com/10.1007/978-3-540-74792-5_12},
   DOI={10.1007/978-3-540-74792-5_12}, abstractNote={Links is a programming
     language for web applications that generates code for all three tiers of a
       web application from a single source, compiling into JavaScript to run
       on the client and into SQL to run on the database. Links supports rich
       clients running in what has been dubbed ‘Ajax’ style, and supports
       concurrent processes with statically-typed message passing. Links is
       scalable in the sense that session state is preserved in the client
       rather than the server, in contrast to other approaches such as Java
       Servlets or PLT Scheme. Client-side concurrency in JavaScript and
       transfer of computation between client and server are both supported by
       translation into continuation-passing style.}, booktitle={Formal Methods
         for Components and Objects}, publisher={Springer Berlin Heidelberg},
   author={Cooper, Ezra and Lindley, Sam and Wadler, Philip and Yallop,
     Jeremy}, editor={de Boer, Frank S. and Bonsangue, Marcello M. and Graf,
       Susanne and de Roever, Willem-PaulEditors}, year={2007}, pages={266--296} }


 @misc{TypescriptSpec ,title={TypeScript Language Specification}, url={https://github.com/microsoft/TypeScript}, abstractNote={TypeScript is a superset of JavaScript that compiles to clean JavaScript output. - microsoft/TypeScript}, journal={GitHub}, author={Microsoft Research} }


 @misc{React,
  title={React – A JavaScript library for building user interfaces}, url={https://reactjs.org/}, abstractNote={A JavaScript library for building user interfaces}, author={Facebook Open Source} }


 @book{NoughtsAndCrosses, title={ansonmiu0214/scribble-noughts-and-crosses}, url={https://github.com/ansonmiu0214/scribble-noughts-and-crosses}, abstractNote={A game of Noughts and Crosses written in TypeScript communicating following a Scribble protocol}, author={Miu, Anson}, year={2020}, month={Jan} }


 @misc{ExpressJS, title={Express - Node.js web application framework}, url={https://expressjs.com/}, author={Node.js Foundation} }


 @misc{NodeJS, title={Node.js}, url={https://nodejs.org/en/}, abstractNote={Node.js® is a JavaScript runtime built on Chrome’s V8 JavaScript engine.}, journal={Node.js}, author={Node.js} }

 @misc{JSX, title={Introducing JSX – React}, url={https://reactjs.org/docs/introducing-jsx.html}, abstractNote={A JavaScript library for building user interfaces}, author={Facebook Open Source} }

 @inbook{ExplicitConnections, place={Berlin, Heidelberg}, title={Explicit
   Connection Actions in Multiparty Session Types}, volume={10202},
   ISBN={978-3-662-54493-8},
   url={http://link.springer.com/10.1007/978-3-662-54494-5_7},
   DOI={10.1007/978-3-662-54494-5_7}, abstractNote={This work extends
     asynchronous multiparty session types (MPST) with explicit connection
       actions to support protocols with optional and dynamic participants. The
       actions by which endpoints are connected and disconnected are a key
       element of real-world protocols that is not treated in existing MPST
       works. In addition, the use cases motivating explicit connections often
       require a more relaxed form of multiparty choice: these extensions do
       not satisfy the conservative restrictions used to ensure safety in
       standard syntactic MPST. Instead, we develop a modelling-based approach
       to validate MPST safety and progress for these enriched protocols. We
       present a toolchain implementation, for distributed programming based on
       our extended MPST in Java, and a core formalism, demonstrating the
       soundness of our approach. We discuss key implementation issues related
       to the proposed extensions: a practical treatment of choice subtyping
       for MPST progress, and multiparty correlation of dynamic binary
         connections.}, booktitle={Fundamental Approaches to Software
           Engineering}, publisher={Springer Berlin Heidelberg}, author={Hu,
             Raymond and Yoshida, Nobuko}, editor={Huisman, Marieke and Rubin,
               JuliaEditors}, year={2017}, pages={116--133} }

 @article{ATS, title={Applied Type System: An Approach to Practical Programming with Theorem-Proving}, url={http://arxiv.org/abs/1703.08683}, abstractNote={The framework Pure Type System (PTS) offers a simple and general approach to designing and formalizing type systems. However, in the presence of dependent types, there often exist certain acute problems that make it difficult for PTS to directly accommodate many common realistic programming features such as general recursion, recursive types, effects (e.g., exceptions, references, input/output), etc. In this paper, Applied Type System (ATS) is presented as a framework for designing and formalizing type systems in support of practical programming with advanced types (including dependent types). In particular, it is demonstrated that ATS can readily accommodate a paradigm referred to as programming with theorem-proving (PwTP) in which programs and proofs are constructed in a syntactically intertwined manner, yielding a practical approach to internalizing constraint-solving needed during type-checking. The key salient feature of ATS lies in a complete separation between statics, where types are formed and reasoned about, and dynamics, where programs are constructed and evaluated. With this separation, it is no longer possible for a program to occur in a type as is otherwise allowed in PTS. The paper contains not only a formal development of ATS but also some examples taken from ats-lang.org, a programming language with a type system rooted in ATS, in support of employing ATS as a framework to formulate advanced type systems for practical programming.}, note={arXiv: 1703.08683}, journal={arXiv:1703.08683 [cs]}, author={Xi, Hongwei}, year={2017}, month={Mar}}


@inproceedings{ICALP13CFSM,
  author = {Pierre-Malo Deniélou and Nobuko Yoshida},
  title = {{Multiparty Compatibility in Communicating Automata: Characterisation and Synthesis of Global Session Types}},
  booktitle = {40th International Colloquium on Automata, Languages and Programming},
  series = {LNCS},
  volume = {7966},
  pages = {174--186},
  publisher = {Springer},
  address = {Berlin, Heidelberg},
  doi = {10.1007/978-3-642-39212-2\_18},
  year = 2013
}

 @misc{WebRTC, title={WebRTC}, url={https://webrtc.org/}, abstractNote={An open framework for the web that enables Real-Time Communications (RTC) capabilities in the browser.}, journal={WebRTC}, author={Uberti, Justin and Thatcher, Peter}, year={2011} }

 @inbook{FeatherweightScribble, place={Cham}, title={Featherweight Scribble},
   volume={11665}, ISBN={978-3-030-21484-5},
   url={http://link.springer.com/10.1007/978-3-030-21485-2_14},
   DOI={10.1007/978-3-030-21485-2_14}, abstractNote={This paper gives a formal
     deﬁnition of the protocol speciﬁcation language Scribble. In collaboration
       with industry, Scribble has been developed as an engineering incarnation
       of the formal multiparty session types. In its ten years of development,
     Scribble has been applied and extended in manyfold ways as to verify and
       ensure correctness of concurrent and distributed systems, e.g. type
       checking, runtime monitoring, code generation, and synthesis. This paper
       introduces a core version of Scribble, Featherweight Scribble. We deﬁne
       the semantics of Scribble by translation to communicating automata and
       show a behaviouralpreserving encoding of Scribble protocols to
       multiparty session type.}, booktitle={Models, Languages, and Tools for
         Concurrent and Distributed Programming}, publisher={Springer
           International Publishing}, author={Neykova, Rumyana and Yoshida,
             Nobuko}, editor={Boreale, Michele and Corradini, Flavio and
               Loreti, Michele and Pugliese, RosarioEditors}, year={2019},
             pages={236--259} }

 @misc{Redux, title={Redux - A predictable state container for JavaScript apps.}, url={https://redux.js.org/}, abstractNote={A predictable state container for JavaScript apps.}, author={Abramov, Dan}, year={2015} }

 @article{javatypestate, title={Concurrent Typestate-Oriented Programming in Java}, volume={291}, ISSN={2075-2180}, DOI={10.4204/EPTCS.291.3}, abstractNote={We describe a generative approach that enables concurrent typestate-oriented programming in Java and other mainstream languages. The approach allows programmers to implement objects exposing a state-sensitive interface using a high-level synchronization abstraction that synchronizes methods with the states of the receiver object in which those methods have an effect. An external tool takes care of generating all the boilerplate code that implements the synchronization logic. Behavioral types are used to specify object protocols. The tool integrates protocol conformance verification with the synchronization logic so that protocol violations are promptly detected at runtime.}, note={arXiv: 1904.01286}, journal={Electronic Proceedings in Theoretical Computer Science}, author={Gerbo, Rosita and Padovani, Luca}, year={2019}, month={Apr}, pages={24–-34} }

 @misc{promise, title={Promise}, url={https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise}, abstractNote={The Promise object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value.}, note={Library Catalog: developer.mozilla.org}, journal={MDN Web Docs}, author={MDN contributors}, year={2020}, month={Mar} }
